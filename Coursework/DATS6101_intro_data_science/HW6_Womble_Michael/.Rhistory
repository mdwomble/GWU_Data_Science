axis.text = element_text(size=14),
axis.title = element_text(size=14),
plot.title = element_text(hjust = 0.5))
hist_gpa_accepted<-ggplot(Accepted, aes(x=gpa)) + geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Accepted Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=14),
axis.title = element_text(size=14),
plot.title = element_text(hjust = 0.5))
hist_gre_rejected<-ggplot(Rejected, aes(x=gre)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Rejected Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=14),
axis.title = element_text(size=14),
plot.title = element_text(hjust = 0.5))
hist_gpa_rejected<-ggplot(Rejected, aes(x=gpa)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Rejected Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=14),
axis.title = element_text(size=14),
plot.title = element_text(hjust = 0.5))
hist_gre_accepted
hist_gpa_accepted
hist_gre_rejected
hist_gpa_rejected
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
mean.height
mean_gre<-mean.Accepted$gre
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Adata <- data.frame(read.csv("LogRegAdmit.csv"))
Adata$admit<-as.factor(Adata$admit)
Adata$rank<-as.factor((Adata$rank))
summary(Adata)
Adata2<-outlierKD2(Adata, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2<-outlierKD2(Adata, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2$admit<-as.factor(Adata2$admit)
Adata2$rank<-as.factor((Adata2$rank))
summary(Adata2)
Accepted<-subset(Adata2, admit==1)
Rejected<-subset(Adata2, admit==0)
library(ggplot2)
hist_gre_accepted<-ggplot(Accepted, aes(x=gre)) +
geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Accepted Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_accepted<-ggplot(Accepted, aes(x=gpa)) + geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Accepted Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_rejected<-ggplot(Rejected, aes(x=gre)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Rejected Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_rejected<-ggplot(Rejected, aes(x=gpa)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Rejected Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_accepted
hist_gpa_accepted
hist_gre_rejected
hist_gpa_rejected
mean_gre<-mean.Accepted$gre
??mean
mean_gre<-mean(Accepted$gre)
mean_gpa<-mean(Accepted$gpa)
mean_gre<-mean(Accepted$gre)
mean_gpa<-mean(Accepted$gpa)
mean_gre
mean-gpa
mean_gre<-mean(Accepted$gre)
mean_gpa<-mean(Accepted$gpa)
mean_gre
mean_gpa
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
summary(Rejected)
summary(Accepted)
Accepted<-subset(Adata2, admit==1)
Rejected<-subset(Adata2, admit==0)
na<-subset(Rejected, is.na(gpa))
na
Accepted<-subset(Adata2, admit==1)
Rejected<-subset(Adata2, admit==0)
na<-subset(Rejected, is.na(gpa))
Rejected<-Rejected[-c(290)]
summary(Rejected)
Accepted<-subset(Adata2, admit==1)
Rejected<-subset(Adata2, admit==0)
na<-subset(Rejected, is.na(gpa))
Rejected=Rejected[-c(290)]
summary(Rejected)
Accepted<-subset(Adata2, admit==1)
Rejected<-subset(Adata2, admit==0)
na<-subset(Rejected, is.na(gpa))
Rejected_clean=Rejected[-c(290)]
summary(Rejected_clean)
summary(Adata)
Adata2<-outlierKD2(Adata, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2<-outlierKD2(Adata, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2$admit<-as.factor(Adata2$admit)
Adata2$rank<-as.factor((Adata2$rank))
summary(Adata2)
na<-subset(Adata2, is.na(gpa))
na
summary(Adata)
Adata2<-outlierKD2(Adata, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2<-outlierKD2(Adata, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2$admit<-as.factor(Adata2$admit)
Adata2$rank<-as.factor((Adata2$rank))
summary(Adata2)
na<-subset(Adata2, is.na(gpa))
Adata2_clean=Adata2[-c(290)]
summary(Adata2_clean)
summary(Adata)
Adata2<-outlierKD2(Adata, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2<-outlierKD2(Adata, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2$admit<-as.factor(Adata2$admit)
Adata2$rank<-as.factor((Adata2$rank))
summary(Adata2)
na<-subset(Adata2, is.na(gpa))
Adata2_clean<-na.omit(Adata2)
summar(Adata2_clean)
summary(Adata2_clean)
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
Accepted<-subset(Adata2, admit==1)
Rejected<-subset(Adata2, admit==0)
library(ggplot2)
hist_gre_accepted<-ggplot(Accepted, aes(x=gre)) +
geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Accepted Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_accepted<-ggplot(Accepted, aes(x=gpa)) + geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Accepted Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_rejected<-ggplot(Rejected, aes(x=gre)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Rejected Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_rejected<-ggplot(Rejected, aes(x=gpa)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Rejected Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_accepted
hist_gpa_accepted
hist_gre_rejected
hist_gpa_rejected
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
Accepted<-subset(Adata2_clean, admit==1)
Rejected<-subset(Adata2_clean, admit==0)
library(ggplot2)
hist_gre_accepted<-ggplot(Accepted, aes(x=gre)) +
geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Accepted Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_accepted<-ggplot(Accepted, aes(x=gpa)) + geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Accepted Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_rejected<-ggplot(Rejected, aes(x=gre)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Rejected Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_rejected<-ggplot(Rejected, aes(x=gpa)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Rejected Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_accepted
hist_gpa_accepted
hist_gre_rejected
hist_gpa_rejected
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
ttest95_gpa_accpted<-t.test(Accpeted$gre)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Adata <- data.frame(read.csv("LogRegAdmit.csv"))
Adata$admit<-as.factor(Adata$admit)
Adata$rank<-as.factor((Adata$rank))
summary(Adata)
Adata2<-outlierKD2(Adata, gre, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2<-outlierKD2(Adata, gpa, rm=TRUE, boxplt=FALSE, histogram=FALSE)
Adata2$admit<-as.factor(Adata2$admit)
Adata2$rank<-as.factor((Adata2$rank))
summary(Adata2)
na<-subset(Adata2, is.na(gpa))
Adata2_clean<-na.omit(Adata2)
Accepted<-subset(Adata2_clean, admit==1)
Rejected<-subset(Adata2_clean, admit==0)
library(ggplot2)
hist_gre_accepted<-ggplot(Accepted, aes(x=gre)) +
geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Accepted Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_accepted<-ggplot(Accepted, aes(x=gpa)) + geom_histogram(color='black', fill='green', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark green', fill='green', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Accepted Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_rejected<-ggplot(Rejected, aes(x=gre)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(200,1000)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gre), sd = sd(Accepted$gre)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GRE Scores of Rejected Applicants", x="GRE Score", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gpa_rejected<-ggplot(Rejected, aes(x=gpa)) + geom_histogram(color='black', fill='red', aes(y=..density..))+
xlim(0,4)+
stat_function(fun = dnorm, args = list(mean = mean(Accepted$gpa), sd = sd(Accepted$gpa)), color='dark red', fill='red', size=1.5) +
# geom_area(stat="function", fun=dnorm, fill='green')+
labs(title="Histogram of GPA Scores of Rejected Applicants", x="GPA", y="Density") +
theme(panel.background = element_blank(),
panel.border=element_rect(color='black', fill=NA),
axis.text = element_text(size=16),
axis.title = element_text(size=16),
plot.title = element_text(hjust = 0.5))
hist_gre_accepted
hist_gpa_accepted
hist_gre_rejected
hist_gpa_rejected
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
ttest95_gpa_accpted<-t.test(Accpeted$gre)
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
ttest95_gpa_accpted<-t.test(Accepeted$gre)
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
ttest95_gpa_accpted<-t.test(Accepted$gre)
ttest95_gpa_accpted
mean_gre_accepted<-mean(Accepted$gre)
mean_gpa_accepted<-mean(Accepted$gpa)
mean_gre_rejected<-mean(Rejected$gre)
mean_gpa_rejected<-mean(Rejected$gpa)
mean_gre_accepted
mean_gpa_accepted
mean_gre_rejected
mean_gpa_rejected
ttest95_gpa_accpted<-t.test(Accepted$gre, conf.level = 0.95)
ttest95_gpa_accpted
ttest95_gre_accpted<-t.test(Accepted$gre, conf.level = 0.95)
ttest95_gpa_accpted<-t.test(Accepted$gpa, conf.level = 0.95)
ttest95_gre_rejected<-t.test(Rejected$gre, conf.level = 0.95)
ttest95_gpa_rejected<-t.test(Rejected$gpa, conf.level = 0.95)
ttest95_gre_accpted
ttest95_gpa_accpted
ttest95_gre_rejected
ttest95_gpa_rejected
ttest95_gre_accpted<-t.test(Accepted$gre, mu=mean(Accepted$gre), conf.level = 0.95)
ttest95_gpa_accpted<-t.test(Accepted$gpa, conf.level = 0.95)
ttest95_gre_rejected<-t.test(Rejected$gre, conf.level = 0.95)
ttest95_gpa_rejected<-t.test(Rejected$gpa, conf.level = 0.95)
ttest95_gre_accpted
ttest95_gpa_accpted
ttest95_gre_rejected
ttest95_gpa_rejected
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
getwd()
# mlb <- data.frame(read.csv("BaseballHeightWeight.csv", header = TRUE))
mlb <- read.csv("BaseballHeightWeight.csv", header = TRUE)
str(mlb)
head(mlb)
colnames(mlb)[4:6]=c("height","weight","age")
# The line above produces no output. To see the changes, use str() or head()
xkabledplyhead(mlb)
# xkabledplytail(mlb, 3)
set.seed(123) # just so that everyone have the same sample for comparison
mlbsample = mlb[ sample(nrow(mlb),30), ]
str(mlbsample)
head(mlbsample)
format(mean(mlbsample$height), digits=4)
format(mean(mlbsample$weight, na.rm = TRUE), digits=5)
library("BSDA") # for z.test
ztest95_2tail = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31) #
ztest95_2tail
ztest95_right = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, alternative = "greater") #
ztest95_right
# ztest99 = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, conf.level=0.99 )
# ztest99
# ztest50 = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, conf.level=0.50 )
# ztest50
# force this one result to always show, regardless of global settings
ztest95_right
ztestrighttail = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, alternative = 'greater' )
ztestrighttail  # p-value is small, reject null, adopt alternative mu is greater than 73.2
ztest99lefttail = z.test(x=mlbsample$height, mu=72.1, sigma.x = 2.31, alternative = 'less' )
# ztest99lefttail  # p-value is large, fail to reject null, which is mu = 73.2 (or greater.)
unloadPkg("BSDA")
# force this one result to always show, regardless of global settings
ztest99lefttail
# t.test is included in the basic R package 'stats'
ttest95 = t.test(x=mlbsample$height, mu=72.1) # default conf.level = 0.95
# t.test(x=mlb$height, mu=73.2, sigma.x = 2.18, conf.level=0.99 )
ttest95
ttest99 = t.test(x=mlbsample$height, mu=72.1, conf.level=0.99 )
# ttest99
names(ttest99)
ttest99$conf.int
ttest99$alternative
ttest99$estimate
# force this one result to always show, regardless of global settings
ttest99
ttestrighttail = t.test(x=mlbsample$height, mu=72.1, alternative = 'greater' ) # conf.level=0.99,
ttestrighttail  # p-value is small, reject null, adopt alternative mu is greater than 73.2
ttestlefttail = t.test(x=mlbsample$height, mu=72.1, alternative = 'less' ) # conf.level=0.99,
# ttestlefttail  # p-value is large, fail to reject null, which is mu = 73.2 (or greater.)
# force this one result to always show, regardless of global settings
ttestlefttail
set.seed(999) # just so that everyone have the same sample for comparison
mlbsample2 = mlb[ sample(nrow(mlb),20), ]
# compare the two samples
format(mean(mlbsample2$height), digits=4)
format(mean(mlbsample2$weight, na.rm = TRUE), digits=5)
format(mean(mlbsample$height), digits=4)
format(mean(mlbsample$weight, na.rm = TRUE), digits=5)
ttest2sample_height = t.test(mlbsample$height,mlbsample2$height)
ttest2sample_height
ttest2sample_weight = t.test(mlbsample$weight,mlbsample2$weight)
ttest2sample_weight
ttest95_gre<-t.test(Accepted$gre, mu=mean(Rejected$gre), conf.level = 0.95)
ttest95_gpa<-t.test(Accepted$gpa, mu=mean(Rejected$gpa), conf.level = 0.95)
ttest95_gre
ttest95_gpa
table(Adata2_clean$rank, Adata2_clean$admit)
prop.table(table(Adata2_clean$admit))
table(Adata2_clean$rank, Adata2_clean$admit)
